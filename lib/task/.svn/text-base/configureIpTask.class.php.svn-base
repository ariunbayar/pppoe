<?php

class configureIpTask extends sfBaseTask
{
  protected function configure()
  {
    // // add your own arguments here
    // $this->addArguments(array(
    //   new sfCommandArgument('my_arg', sfCommandArgument::REQUIRED, 'My argument'),
    // ));

    $this->addOptions(array(
      new sfCommandOption('application', null, sfCommandOption::PARAMETER_REQUIRED, 'The application name', 'frontend'),
      new sfCommandOption('env', null, sfCommandOption::PARAMETER_REQUIRED, 'The environment', 'dev'),
      new sfCommandOption('connection', null, sfCommandOption::PARAMETER_REQUIRED, 'The connection name', 'doctrine'),
      // add your own options here
    ));

    $this->namespace        = 'configure';
    $this->name             = 'ip';
    $this->briefDescription = '';
    $this->detailedDescription = <<<EOF
The [configure:ip|INFO] task does things.
Call it with:

  [php symfony configure:ip|INFO]
EOF;
  }

  protected function execute($arguments = array(), $options = array())
  {
    // initialize the database connection
    $databaseManager = new sfDatabaseManager($this->configuration);
    $connection = $databaseManager->getDatabase($options['connection'])->getConnection();

    $in_progress = ConfigTable::getConfig('renew_ipsetting') == 1;
    if (!$in_progress) return;

    $app_yml = ConfigTable::getConfig('app.yml');
    $content = file_get_contents($app_yml);
    if (preg_match('/^  client_ip:[ ]+[\'"][0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}[\'"]$/', $content, $matches)) {
      var_dump($matches);
    }
  }
}
