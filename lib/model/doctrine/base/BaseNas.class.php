<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Nas', 'doctrine');

/**
 * BaseNas
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $nasname
 * @property string $shortname
 * @property string $type
 * @property integer $ports
 * @property string $secret
 * @property string $community
 * @property string $description
 * 
 * @method integer getId()          Returns the current record's "id" value
 * @method string  getNasname()     Returns the current record's "nasname" value
 * @method string  getShortname()   Returns the current record's "shortname" value
 * @method string  getType()        Returns the current record's "type" value
 * @method integer getPorts()       Returns the current record's "ports" value
 * @method string  getSecret()      Returns the current record's "secret" value
 * @method string  getCommunity()   Returns the current record's "community" value
 * @method string  getDescription() Returns the current record's "description" value
 * @method Nas     setId()          Sets the current record's "id" value
 * @method Nas     setNasname()     Sets the current record's "nasname" value
 * @method Nas     setShortname()   Sets the current record's "shortname" value
 * @method Nas     setType()        Sets the current record's "type" value
 * @method Nas     setPorts()       Sets the current record's "ports" value
 * @method Nas     setSecret()      Sets the current record's "secret" value
 * @method Nas     setCommunity()   Sets the current record's "community" value
 * @method Nas     setDescription() Sets the current record's "description" value
 * 
 * @package    pppoe
 * @subpackage model
 * @author     Ariunbayar
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseNas extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('nas');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('nasname', 'string', 128, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 128,
             ));
        $this->hasColumn('shortname', 'string', 32, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 32,
             ));
        $this->hasColumn('type', 'string', 30, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => 'other',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 30,
             ));
        $this->hasColumn('ports', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('secret', 'string', 60, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => 'secret',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 60,
             ));
        $this->hasColumn('community', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('description', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => 'RADIUS Client',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 200,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}