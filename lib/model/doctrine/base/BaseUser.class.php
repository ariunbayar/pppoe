<?php

/**
 * BaseUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $username
 * @property string $password
 * @property string $role
 * @property Doctrine_Collection $Customers
 * @property Doctrine_Collection $ChangeLogs
 * 
 * @method string              getUsername()   Returns the current record's "username" value
 * @method string              getPassword()   Returns the current record's "password" value
 * @method string              getRole()       Returns the current record's "role" value
 * @method Doctrine_Collection getCustomers()  Returns the current record's "Customers" collection
 * @method Doctrine_Collection getChangeLogs() Returns the current record's "ChangeLogs" collection
 * @method User                setUsername()   Sets the current record's "username" value
 * @method User                setPassword()   Sets the current record's "password" value
 * @method User                setRole()       Sets the current record's "role" value
 * @method User                setCustomers()  Sets the current record's "Customers" collection
 * @method User                setChangeLogs() Sets the current record's "ChangeLogs" collection
 * 
 * @package    pppoe
 * @subpackage model
 * @author     Ariunbayar
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUser extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('user');
        $this->hasColumn('username', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 255,
             ));
        $this->hasColumn('password', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('role', 'string', 4000, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 4000,
             ));

        $this->option('type', 'MYISAM');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Customer as Customers', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('ChangeLog as ChangeLogs', array(
             'local' => 'id',
             'foreign' => 'object_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}